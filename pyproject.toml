# TODO: work out how to do this well (https://gitlab.com/magicc/copier-fgen-based-repository/-/issues/1)
[project]
name = "fgen-example"
version = "0.1.0"
description = "Example project using fgen to wrap a simple module"
readme = "README.md"
authors = [{name = "Jared Lewis, email = jared.lewis@climate-resource.com"}]
# TODO: This appears to not be used. The docs I looked at were
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
# via https://scikit-build-core.readthedocs.io/en/latest/getting_started.html#python-package-configuration
# (https://gitlab.com/magicc/copier-fgen-based-repository/-/issues/1)
packages = [{include = "fgen_example", from = "src"}]

[tool.poetry]
name = "fgen-example"
version = "0.1.0"
description = "Example project using fgen to wrap a simple module"
readme = "README.md"
authors = ["Jared Lewis <jared.lewis@climate-resource.com>"]
packages = [{include = "fgen_example", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"
pint = "^0.22"
numpy = "^1.25.2"
fgen = "0.3.1"

[tool.poetry.group.tests.dependencies]
pytest = "^7.3.1"

[tool.poetry.group.docs.dependencies]
myst-nb = "^0.17.0"
sphinx-rtd-theme = "^1.2.0"
sphinx-autodoc-typehints = "^1.23.0"
sphinx-autodocgen = "^1.3"
jupytext = "^1.14.5"
sphinx-copybutton = "^0.5.2"

[tool.poetry.group.dev.dependencies]
pytest-cov = "^4.0.0"
coverage = "^7.2.0"
black = "23.3.0"
blackdoc = "0.3.8"
mypy = "^1.2.0"
ruff = "0.0.264"
pre-commit = "^3.3.1"
towncrier = "^23.6.0"
liccheck = "^0.9.1"
cmakelang = "^0.6.13"

[build-system]
requires = ["scikit-build-core", "oldest-supported-numpy", "fgen==0.3.1"]
build-backend = "scikit_build_core.build"

[tool.scikit-build]
cmake.verbose = true
logging.level = "DEBUG"
ninja.minimum-version = "1.10"
cmake.minimum-version = "3.17.2"
build-dir = "build"

[tool.scikit-build.cmake.define]
# TODO: docs for what is going on here (https://gitlab.com/magicc/copier-fgen-based-repository/-/issues/6)
# Need to point to this more flexibly, although
# these defaults can be overridden using the `CMAKE_ARGS` environment variable.
# See https://scikit-build-core.readthedocs.io/en/latest/configuration.html#configuring-cmake-arguments-and-defines
# This needs to match what is fed to `fgen generate`
# Should we set this from some environment variable or other thing so it can also be
# shared with the Makefile?
EXTENSION_MODULE_NAME = "_lib"
# Set this from some environment variable so it can also be shared
# with the Makefile?
# Always including a submodule will make the pyproject.toml and CMakeLists.txt
# auto-generation process more complicated. We could also just not support this
# pattern?
EXTENSION_SUBMODULE_NAME = "_libsubmodule"

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
fail_under = 90
skip_empty = true
show_missing = true
# Regexes for lines to exclude from consideration in addition to the defaults
exclude_also = [
    # Don't complain about missing type checking code:
    "if TYPE_CHECKING",
]

[tool.mypy]
strict = true
# prevent unimported libraries silently being treated as Any
disallow_any_unimported = true
# show error codes on failure with context
show_error_codes = true
show_error_context = true
# warn if code can't be reached
warn_unreachable = true
# importing following uses default settings
follow_imports = "normal"

[tool.jupytext]
formats = "ipynb,py:percent"

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
]

[tool.ruff]
src = ["src"]
target-version = "py39"
select = [
    "E",  # pycodestyle error
    "W",  # pycodestyle warning
    "F",  # pyflakes
    "I",  # isort
    "D",  # pydocstyle
    "PL",  # pylint
    "TRY",  # tryceratops
    "NPY",  # numpy rules
    "RUF",  # ruff specifics
    "UP",  # pyupgrade
    "S",  # flake8-bandit
    # pandas support via pandas-vet. In some cases we will want to disable
    # this because it can lead to too many false positives.
    "PD",
]
unfixable = [
    "PD002",  # Disable autofix for inplace as this often introduces bugs
]
ignore = [
    "D105", # Missing docstring in magic method
    "D200",  # One-line docstring should fit on one line with quotes
    "D400",  # First line should end with a period
]
# Provide some leeway for long docstring, this is otherwise handled by black
line-length = 110

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.per-file-ignores]
"test*.py" = [
    "D",  # Documentation not needed in tests
    "S101",  # S101 Use of `assert` detected
    "PLR2004" # Magic value used in comparison
]
"docs/source/notebooks/*" = [
    "D100",  # Missing docstring at the top of file
    "E402",  # Module level import not at top of file
    "S101",  # Use of `assert` detected
]
"scripts/*" = [
    "S101" # S101 Use of `assert` detected
]

[tool.ruff.isort]
known-first-party = ["fgen_example"]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.towncrier]
package = "fgen-example"
package_dir = "src"
filename = "docs/source/changelog.md"
directory = "changelog/"
title_format = "## fgen-example {version} ({project_date})"
underlines = ["", "", ""]
issue_format = "[#{issue}](https://gitlab.com/magicc/fgen-example/-/merge_requests/{issue})"

  [[tool.towncrier.type]]
  directory = "breaking"
  name = "Breaking Changes"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "deprecation"
  name = "Deprecations"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "feature"
  name = "Features"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "improvement"
  name = "Improvements"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "fix"
  name = "Bug Fixes"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "docs"
  name = "Improved Documentation"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "trivial"
  name = "Trivial/Internal Changes"
  showcontent = false

[tool.liccheck]
authorized_licenses = [
    "bsd",
    "bsd license",
    "BSD 3-Clause",
    "CC0",
    "apache",
    "apache 2.0",
    "apache software",
    "apache software license",
    "Apache License, Version 2.0",
    "Historical Permission Notice and Disclaimer (HPND)",
    "isc license",
    "isc license (iscl)",
    "gnu lgpl",
    "lgpl with exceptions or zpl",
    "LGPLv2+",
    "GNU Lesser General Public License v2 (LGPLv2)",
    "GNU Lesser General Public License v2 or later (LGPLv2+)",
    "mit",
    "mit license",
    "Mozilla Public License 2.0 (MPL 2.0)",
    "python software foundation",
    "python software foundation license",
    "zpl 2.1",
]
# This starting list is relatively conservative. Depending on the project, it
# may make sense to move some of these into the authorized list
unauthorized_licenses = [
    "agpl",
    "gnu agpl",
    "gpl v3",
    "gplv3",
    "gpl v2",
    "gplv2",
    "gpl v1",
    "gplv1",
]
